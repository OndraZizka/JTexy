/*
 * SwingSandboxMainWindow.java
 */

package cz.dynawest.jtexy.sandbox.swing;

import cz.dynawest.jtexy.JTexy;
import cz.dynawest.jtexy.util.JavaUtils;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Logger;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.JToggleButton;
import org.apache.commons.lang.StringUtils;

/**
 * The application's main frame.
 */
public class SwingSandboxMainWindow extends FrameView {
		Logger log = Logger.getLogger( SwingSandboxMainWindow.class.getName() );
		int keyStrokeCount = 0;
    private String lastExStackTrace = "No exception yet.";

    public SwingSandboxMainWindow(SingleFrameApplication app) {
        super(app);

        initComponents();
        jSplitPane.setDividerLocation( 1.0 );
        stackTraceTextArea.setText( lastExStackTrace );

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = SwingSandboxApp.getApplication().getMainFrame();
            aboutBox = new AboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        SwingSandboxApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    menuBar = new javax.swing.JMenuBar();
    javax.swing.JMenu fileMenu = new javax.swing.JMenu();
    javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
    javax.swing.JMenu helpMenu = new javax.swing.JMenu();
    javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
    statusPanel = new javax.swing.JPanel();
    javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
    statusMessageLabel = new javax.swing.JLabel();
    statusAnimationLabel = new javax.swing.JLabel();
    progressBar = new javax.swing.JProgressBar();
    showExceptionButton = new javax.swing.JToggleButton();
    mainPanel = new javax.swing.JPanel();
    jSplitPane = new javax.swing.JSplitPane();
    texyStack = new javax.swing.JPanel();
    jScrollPaneTexyText = new javax.swing.JScrollPane();
    texyText = new javax.swing.JTextArea();
    jScrollPaneHtmlView = new javax.swing.JScrollPane();
    htmlView = new javax.swing.JEditorPane();
    jScrollPaneHtmlText = new javax.swing.JScrollPane();
    htmlSourceTextArea = new javax.swing.JTextArea();
    stackTraceScrollPane = new javax.swing.JScrollPane();
    stackTraceTextArea = new javax.swing.JTextArea();

    menuBar.setName("menuBar"); // NOI18N

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(cz.dynawest.jtexy.sandbox.swing.SwingSandboxApp.class).getContext().getResourceMap(SwingSandboxMainWindow.class);
    fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
    fileMenu.setName("fileMenu"); // NOI18N

    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(cz.dynawest.jtexy.sandbox.swing.SwingSandboxApp.class).getContext().getActionMap(SwingSandboxMainWindow.class, this);
    exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
    exitMenuItem.setName("exitMenuItem"); // NOI18N
    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
    helpMenu.setName("helpMenu"); // NOI18N

    aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
    aboutMenuItem.setName("aboutMenuItem"); // NOI18N
    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    statusPanel.setName("statusPanel"); // NOI18N

    statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

    statusMessageLabel.setText(resourceMap.getString("statusMessageLabel.text")); // NOI18N
    statusMessageLabel.setName("statusMessageLabel"); // NOI18N

    statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

    progressBar.setName("progressBar"); // NOI18N

    showExceptionButton.setText(resourceMap.getString("showExceptionButton.text")); // NOI18N
    showExceptionButton.setName("showExceptionButton"); // NOI18N
    showExceptionButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        showExceptionButtonActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);
    statusPanel.setLayout(statusPanelLayout);
    statusPanelLayout.setHorizontalGroup(
      statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
      .add(statusPanelLayout.createSequentialGroup()
        .addContainerGap()
        .add(statusMessageLabel)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 227, Short.MAX_VALUE)
        .add(showExceptionButton)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(statusAnimationLabel)
        .addContainerGap())
    );
    statusPanelLayout.setVerticalGroup(
      statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(statusPanelLayout.createSequentialGroup()
        .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(statusMessageLabel)
          .add(statusAnimationLabel)
          .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(showExceptionButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .add(11, 11, 11))
    );

    mainPanel.setName("mainPanel"); // NOI18N
    mainPanel.setLayout(new javax.swing.BoxLayout(mainPanel, javax.swing.BoxLayout.LINE_AXIS));

    jSplitPane.setDividerLocation(500);
    jSplitPane.setContinuousLayout(true);
    jSplitPane.setName("jSplitPane"); // NOI18N
    jSplitPane.setOneTouchExpandable(true);

    texyStack.setName("texyStack"); // NOI18N
    texyStack.setLayout(new java.awt.GridLayout(3, 1));

    jScrollPaneTexyText.setName("jScrollPaneTexyText"); // NOI18N

    texyText.setColumns(20);
    texyText.setFont(resourceMap.getFont("texyText.font")); // NOI18N
    texyText.setRows(5);
    texyText.setTabSize(4);
    texyText.setText(resourceMap.getString("texyText.text")); // NOI18N
    texyText.setName("texyText"); // NOI18N
    texyText.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        texyTextKeyTyped(evt);
      }
    });
    jScrollPaneTexyText.setViewportView(texyText);

    texyStack.add(jScrollPaneTexyText);

    jScrollPaneHtmlView.setName("jScrollPaneHtmlView"); // NOI18N

    htmlView.setContentType(resourceMap.getString("htmlView.contentType")); // NOI18N
    htmlView.setEditable(false);
    htmlView.setFocusable(false);
    htmlView.setName("htmlView"); // NOI18N
    jScrollPaneHtmlView.setViewportView(htmlView);

    texyStack.add(jScrollPaneHtmlView);

    jScrollPaneHtmlText.setName("jScrollPaneHtmlText"); // NOI18N

    htmlSourceTextArea.setColumns(20);
    htmlSourceTextArea.setFont(resourceMap.getFont("htmlSourceTextArea.font")); // NOI18N
    htmlSourceTextArea.setRows(5);
    htmlSourceTextArea.setText(resourceMap.getString("htmlSourceTextArea.text")); // NOI18N
    htmlSourceTextArea.setName("htmlSourceTextArea"); // NOI18N
    jScrollPaneHtmlText.setViewportView(htmlSourceTextArea);

    texyStack.add(jScrollPaneHtmlText);

    jSplitPane.setLeftComponent(texyStack);

    stackTraceScrollPane.setMinimumSize(new java.awt.Dimension(0, 21));
    stackTraceScrollPane.setName("stackTraceScrollPane"); // NOI18N
    stackTraceScrollPane.setPreferredSize(new java.awt.Dimension(100, 207));
    stackTraceScrollPane.addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentResized(java.awt.event.ComponentEvent evt) {
        stackTraceScrollPaneComponentResized(evt);
      }
    });

    stackTraceTextArea.setEditable(false);
    stackTraceTextArea.setFont(resourceMap.getFont("stackTraceTextArea.font")); // NOI18N
    stackTraceTextArea.setRows(10);
    stackTraceTextArea.setTabSize(4);
    stackTraceTextArea.setText(resourceMap.getString("stackTraceTextArea.text")); // NOI18N
    stackTraceTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    stackTraceTextArea.setMargin(new java.awt.Insets(2, 5, 1, 1));
    stackTraceTextArea.setMinimumSize(new java.awt.Dimension(0, 0));
    stackTraceTextArea.setName("stackTraceTextArea"); // NOI18N
    stackTraceScrollPane.setViewportView(stackTraceTextArea);

    jSplitPane.setRightComponent(stackTraceScrollPane);

    mainPanel.add(jSplitPane);

    setComponent(mainPanel);
    setMenuBar(menuBar);
    setStatusBar(statusPanel);
  }// </editor-fold>//GEN-END:initComponents


    private void showExceptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showExceptionButtonActionPerformed
      JToggleButton btn = (JToggleButton)evt.getSource();
      if( btn.isSelected() ){
        stackTraceTextArea.setText( lastExStackTrace );
        jSplitPane.setDividerLocation( 0.5 );
      }
      else {
        jSplitPane.setDividerLocation( 1.0 );
      }
    }//GEN-LAST:event_showExceptionButtonActionPerformed

    private void texyTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texyTextKeyTyped
      JTextArea textarea = (JTextArea) evt.getComponent();
      String texySource = textarea.getText();
      char keyCode = evt.getKeyChar();
      //if( Character.isLetterOrDigit( keyCode ) || Character.isSpaceChar( keyCode )  )
      if( keyCode >= 0x20 || keyCode == 0x0A || keyCode == 0x0D  ){
        // TODO: The carret doesn't have to be at the end...
        //texySource += Character.toString( evt.getKeyChar() );
        //?? textarea.getDocument().addDocumentListener( new ... );

        String ch = Character.toString( evt.getKeyChar() );

        texySource = StringUtils.overlay(texySource, ch,
                textarea.getSelectionStart(), textarea.getSelectionEnd()
                );
      }


      try {
        JTexy texy = JTexy.create();
        String htmlResult = texy.process( texySource );
        htmlView.setText( htmlResult );
        htmlSourceTextArea.setText( htmlResult );
        this.statusMessageLabel.setText(
                ""+(++keyStrokeCount)+" keystrokes without an exception :)");
      } catch( Throwable ex ) {
        keyStrokeCount = 0;
        this.statusMessageLabel.setText( ex.getMessage() );
        lastExStackTrace = JavaUtils.getStackTrace( ex );
        stackTraceTextArea.setText( lastExStackTrace );
        showExceptionButton.setVisible( true );
      }
}//GEN-LAST:event_texyTextKeyTyped

    private void stackTraceScrollPaneComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_stackTraceScrollPaneComponentResized
      boolean stackTraceShown = 0 != stackTraceScrollPane.getWidth();
      showExceptionButton.setSelected( stackTraceShown );
      statusMessageLabel.setText( "Width: "+stackTraceScrollPane.getWidth() );
    }//GEN-LAST:event_stackTraceScrollPaneComponentResized

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextArea htmlSourceTextArea;
  private javax.swing.JEditorPane htmlView;
  private javax.swing.JScrollPane jScrollPaneHtmlText;
  private javax.swing.JScrollPane jScrollPaneHtmlView;
  private javax.swing.JScrollPane jScrollPaneTexyText;
  private javax.swing.JSplitPane jSplitPane;
  private javax.swing.JPanel mainPanel;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JProgressBar progressBar;
  private javax.swing.JToggleButton showExceptionButton;
  private javax.swing.JScrollPane stackTraceScrollPane;
  private javax.swing.JTextArea stackTraceTextArea;
  private javax.swing.JLabel statusAnimationLabel;
  private javax.swing.JLabel statusMessageLabel;
  private javax.swing.JPanel statusPanel;
  private javax.swing.JPanel texyStack;
  private javax.swing.JTextArea texyText;
  // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
